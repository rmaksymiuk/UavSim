# -*- coding: utf-8 -*-
"""Beta_MDC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4BBsQRxRGpLFPTnyoRObVJBOPfi7D8A
"""

import numpy as np
from collections.abc import Sequence

"""*italicized text*## This is the first version of the multi drone coordination simulator
- This version will take the following parameters
  - Number of drones
  - Location of sharks
  - Location of control station

## UAV Class
- Parameters in configuration:
  - Speed Cost Function
  - Object Detection Performance Function
  - Initial Position Vector
  - Energy Capacity
  - Frames Per Second
"""

class UAV:
  '''
  Initializes a UAV object
  @Params
    - configuration: dictionary containing initialization options for the drone.
      - speed_cost: function mapping velocity to energy consumption
      - obj_detect_performance: function mapping drone state to the performance of object recognition
      - energy_capacity: total energy available for the drone
      - fps: frames per second
  '''

  def __init__(self, configuration):
    # Speed Cost Function
    self.custom_speed_cost = None
    if 'speed_cost' in configuration:
      self.custom_speed_cost = configuration['speed_cost']
    # Object Recognition Performance Function
    self.custom_obj_dectect_performance = None
    if 'obj_detect_performance' in configuration:
      self.custom_obj_dectect_performance = configuration['obj_detect_performance']
    # UAV initial position
    self.current_position = np.full((3,), 0.0)
    if 'initial_position' in configuration:
      self.current_position = configuration['initial_position']
    # UAV energy limit
    self.energy_capacity = 10 # Totally arbitrary
    if 'energy_capacity' in configuration:
      self.energy_capacity = configuration['energy_capacity']
    # UAV frames per second
    self.fps = 10
    if 'fps' in configuration:
      self.fps = configuration['fps']
    # Velocity
    self.current_velocity = np.full((3,), 0.0)
    # Energy Consumed
    self.energy_used = 0
    # Keep track of total time the drone is in the air
    self.total_time = 0

  '''
  The default object detection performance function. 
  Returns: False Politive rate for a single frame that doesn't contain a shark,
    - False Politive rate for a single frame that doesn't contain a shark
    - False Negative rate for a single frame that does contain a shark only after the object is
      out of the frame.

  @Params (Any custom function must implement these)
    - position: Drone Position as a vector of length three. [x, y, z]. m
    - velocity: Drone Velocity as a vector of length three. [x, y, z]. m/s
    - ang_min: Minimum Angle Between Object and Drone. Degrees. 
  '''
  def object_detect_performance(self, position, velocity, ang_min):
    return 0.05, 0.1

  '''
  The default speed cost function.
  Returns: Energy/second

  @Params (Any custom function must implement these)
    - velocity as a vector of length three [x, y, z]. m/s
  '''
  def default_speed_cost(self, velocity):
    return 0.5


  '''
  Given a point, target, changes the UAV's velocity vector to pursue
  target at the same speed.
  '''
  def change_objective(self, target):
    if len(target) != 3:
      raise ValueError('Target point must be an array of len 3')
    pos_diff = target - self.current_position
    pos_magnitude = np.sqrt(pos_diff @ pos_diff)
    v_magnitude = np.sqrt(self.current_velocity @ self.current_velocity)
    self.current_velocity = pos_diff / pos_magnitude * v_magnitude

  
  '''
  Given a step of time, 
  '''
  def take_step(self, time_step):
    pass

"""## Environment Class
- Parameters in configuration:
  - Array of Drone Objects
  - Array of Shark Locations: 2D
  - Array of Shark Velocities: 2D
  - Boundary of the environment
    - List of coordinates
  - Any additional environmental constraints should go in this class
    - Maximum inter-drone distance
"""

class Environment:
  def __init__(self, configuration):
    if 'uavs' not in configuration:
      raise ValueError('Need to specify drones in configuration.')
    self.drones = configuration['uavs']
    if 'boundary' not in configuration:
      raise ValueError('Need to specify environmental boundary in configuration')
    self.boundary = configuration['boundary']
    if 'shark_locs' not in configuration:
      raise ValueError('Need to specify shark locations in configuration')
    self.shark_locs = shark_locs
    self.shark_velocities = np.full((len(shark_locs), 2), 0.0)
    if 'shark_velocities' in configuration:
      self.shark_velocities = configuration['shark_velocities']

"""## Plan Interface
- An implementation of the plan class needs to implement the following functions
  - Generate Paths: Given an environment and list of UAVs, generate list of paths for each UAV.
  - Shark Detect Event: This method is called whenever one of the UAVs detects a shark. 
"""

class Plan:
  def generate_paths(environment:Environment) -> List[]:
    pass

def fun(x: int) -> Sequence[np.ndarray]:
  return np.arange(x)